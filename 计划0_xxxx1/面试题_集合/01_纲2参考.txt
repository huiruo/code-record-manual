
-----------00

等到后来你慢慢你懂了什么Js里只有函数作用域，懂了它的作用域链，懂了它this的指向，懂了它闭包，懂了它的__proto__原型链， 才知道，卧槽，原来继承可以这样写!!! 


-----------01
发现了各种比如prototype继承，call继承, 各种乱七八糟的继承.. 然而你这会并不懂这是怎么来的，好，你就把它当做范式，记住了(真难为你了)。然并卵，你找的资料越多，越发现要实现继承的方法简直跟大杂烩一般，各种口味都有，这会你脑袋就像一片乱麻，梳理不清楚。


-----------02
javascript给我的感觉是随性所欲的做事情。首先使用的方式的灵感还是来自于lisp，闭包匿名函数把函数当变量声明这种使用方式更接近于思维直接的模式。以后原型链继承模式，是和面向对象的模板继承有非常大的不同。所以看这个java的名字，用着和java一样的c语法，在面向对象抽象的时候却异常不同。给人造成凌乱的感觉。


-----------03
等到了原型链这部分就开始酸爽了，都会了之后再去学ES6，会觉得又学了门新语言，然后开始深入promise, generator等等就会发现简直爆炸



----------04
JS可是函数式语言，基本可以抛弃绝大多数的设计模式。而且函数式特么一点都不简单，OOP我可以想1分钟写30行，函数式我想30分钟才写1行




---------05
认为js容易，因为他们只是用Javascript操作Dom






面试官好，我叫陈辉若，今年24岁，我想从事的前端开发，为什么呢？一我对前端比较感兴趣，为什么比较感兴趣，我哥也是做前端的，因为前端是直接面向客户的，做起来会比较有成就感。前端发展很快，对前端程序员的要求也越来越高，我认为要成为一名优秀的前端工程师，首先要有扎实的javascript基础，其次实践，就是做比较牛逼一点的项目，因为这样技术进步才会快。我做过几个前端项目，一个是公司后台模板，1.解决旧后台系统的遗留问题，解决ui问题，还有用户操作不人性话啊，如加强可复用性，增加可定制的功，组件化。还有一个用到vue,vuejs,那时候感觉 因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，数据驱动挺牛逼。上一家公司很好，不过自己想学习新的技术，接触新的业务提升自己。







以下是我为了准备14年9月面试阿里所做的笔记节选：（仅仅是考察点，具体题目和扩展请自己思考）
基础
1，什么是命名空间，变量污染，变量声明提升，预编译？如何检查一段代码执行后是否声明了全局变量？
2，隐式转换的种种规则
3，关于对象，对象的属性可能有哪些特性(attribute)？
什么是原型链？
如何检测某一属性是在对象中还是原型链中？
如何检测是否是普通对象或空对象？
写一个工厂模式？(工厂模式也有很多细节，具体可以参考《javascript模式》一书，不是《javascript设计模式》)
4，变量类型检测、特性检测以及异常避免
5，setTimeout的特性
6，数组几个API的手工实现
7，事件
8，正则表达式，至少要明白$1和\1的意思和几个API的用法。
9，javascript如何获得随机unicode字符？
10，JSON.parse的参数传一个什么对象的时候不能处理？(可以试试JSON.parse(window))
11，fn.apply的第一个参数是context(函数运行的上下文)，那么这个参数传一个数组会怎么处理？

DOM操作
1，实现一些API如getElementsByClass（有很多细节，参见司徒正美的博客）
2，各种宽度高度(clientHeight之类)的含义及各浏览器之间的差异性
3，实现一个带回调函数的插入DOM节点API（须考虑script标签、documentFragment）

CSS操作
1，如何操作CSS的伪类和伪元素？
2，如何检测改浏览器是否支持某个CSS3的特性？ 
ajax操作
1，get和post的区别及使用要点
2，http协议，包括格式、状态码，cookie操作
3，跨域
4，转换JSON的几种方式，JSON.stringfy有什么使用限制？





基础扎实这就不说了，能否写出高性能的js代码，能否写出高性能的异步代码。


